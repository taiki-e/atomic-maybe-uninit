name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
      - dev
      - staging
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_TEST_THREADS: 1
  RUSTDOCFLAGS: -D warnings
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: stable
          - rust: beta
          - rust: nightly
          - rust: stable
            target: aarch64-unknown-linux-gnu
          - rust: nightly
            target: aarch64-unknown-linux-gnu
          - rust: stable
            target: armv7-unknown-linux-gnueabi
          - rust: nightly
            target: armv7-unknown-linux-gnueabi
          - rust: stable
            target: armv7-unknown-linux-gnueabihf
          - rust: nightly
            target: armv7-unknown-linux-gnueabihf
          - rust: stable
            target: i586-unknown-linux-gnu
          - rust: nightly
            target: i586-unknown-linux-gnu
          - rust: stable
            target: i686-unknown-linux-gnu
          - rust: nightly
            target: i686-unknown-linux-gnu
          - rust: nightly
            target: mips-unknown-linux-gnu
            os: ubuntu-18.04
          - rust: nightly
            target: mipsel-unknown-linux-gnu
          - rust: nightly
            target: mips64-unknown-linux-gnuabi64
            os: ubuntu-18.04
          - rust: nightly
            target: mips64el-unknown-linux-gnuabi64
          - rust: nightly
            target: powerpc-unknown-linux-gnu
            os: ubuntu-18.04
          - rust: nightly
            target: powerpc64-unknown-linux-gnu
            os: ubuntu-18.04
          - rust: nightly
            target: powerpc64le-unknown-linux-gnu
          - rust: stable
            target: riscv64gc-unknown-linux-gnu
          - rust: nightly
            target: riscv64gc-unknown-linux-gnu
          - rust: stable
            target: thumbv7neon-unknown-linux-gnueabihf
          - rust: nightly
            target: thumbv7neon-unknown-linux-gnueabihf
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: taiki-e/github-actions/install-rust@main
        with:
          toolchain: ${{ matrix.rust }}
          component: rust-src
      - uses: taiki-e/install-action@cargo-hack
      - uses: taiki-e/install-action@cargo-minimal-versions
      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: matrix.target != ''

      - run: cargo test -vv --workspace --all-features $DOCTEST_XCOMPILE
      - run: cargo test -vv --workspace --all-features --release $DOCTEST_XCOMPILE
      - run: cargo test -vv --workspace --all-features --release $DOCTEST_XCOMPILE
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat

      # +lse
      - run: cargo test -vv --workspace --all-features $DOCTEST_XCOMPILE
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+lse
        if: startsWith(matrix.target, 'aarch64')
      - run: cargo test -vv --workspace --all-features --release $DOCTEST_XCOMPILE
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+lse
        if: startsWith(matrix.target, 'aarch64')
      - run: cargo test -vv --workspace --all-features --release $DOCTEST_XCOMPILE
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+lse
        if: startsWith(matrix.target, 'aarch64')
      # TODO: it seems qemu-user has not yet properly implemented FEAT_LSE2: https://github.com/taiki-e/portable-atomic/pull/11#issuecomment-1114044327

      # pwr8
      - run: cargo test -vv --workspace --all-features $DOCTEST_XCOMPILE
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-cpu=pwr8 --cfg qemu
        if: startsWith(matrix.target, 'powerpc64le')
      - run: cargo test -vv --workspace --all-features --release $DOCTEST_XCOMPILE
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-cpu=pwr8 --cfg qemu
        if: startsWith(matrix.target, 'powerpc64le')
      - run: cargo test -vv --workspace --all-features --release $DOCTEST_XCOMPILE
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-cpu=pwr8 --cfg qemu
        if: startsWith(matrix.target, 'powerpc64le')

      - run: cargo minimal-versions build -vvv --workspace --all-features --ignore-private
        if: startsWith(matrix.rust, 'nightly')

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: stable
          - rust: beta
          - rust: nightly
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: taiki-e/github-actions/install-rust@main
        with:
          toolchain: ${{ matrix.rust }}
          component: rust-src
      - uses: taiki-e/install-action@cargo-hack
      - run: tools/build.sh

  no-std:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: taiki-e/github-actions/install-rust@main
      - run: sudo apt-get -o Acquire::Retries=10 -qq update && sudo apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y qemu-system-arm
      - run: tools/no-std.sh

  msrv:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: taiki-e/install-action@cargo-hack
      # Make sure this crate can be built with MSRV and all later versions.
      # However, this takes time, so for PR, set the version interval.
      - run: cargo hack build -vvv --workspace --feature-powerset --optional-deps --ignore-private --no-dev-deps --version-range ..
        if: github.event_name != 'pull_request'
      - run: cargo hack build -vvv --workspace --feature-powerset --optional-deps --ignore-private --no-dev-deps --version-range .. --version-step 2
        if: github.event_name == 'pull_request'

  valgrind:
    env:
      CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER: valgrind -v --error-exitcode=1 --error-limit=no --leak-check=full --show-leak-kinds=all --track-origins=yes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: taiki-e/github-actions/install-rust@main
      - uses: taiki-e/install-action@valgrind
      # -Z doctest-xcompile is needed to apply CARGO_TARGET_*_RUNNER to doctest.
      - run: cargo test -vv --workspace --all-features -Z doctest-xcompile
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} --cfg valgrind
          RUSTFLAGS: ${{ env.RUSTFLAGS }} --cfg valgrind
      - run: cargo test -vv --workspace --all-features --release -Z doctest-xcompile
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} --cfg valgrind
          RUSTFLAGS: ${{ env.RUSTFLAGS }} --cfg valgrind
      - run: cargo test -vv --workspace --all-features --release -Z doctest-xcompile
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} --cfg valgrind
          RUSTFLAGS: ${{ env.RUSTFLAGS }} --cfg valgrind

  tidy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: taiki-e/github-actions/install-rust@main
        with:
          component: clippy,rustfmt
      - uses: taiki-e/install-action@shellcheck
      - run: cargo fmt --all --check
        if: always()
      - run: cargo clippy --workspace --all-features --all-targets
        if: always()
      - run: shellcheck $(git ls-files '*.sh')
        if: always()

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: taiki-e/github-actions/install-rust@main
      - run: cargo doc --workspace --all-features

  # ALL THE PREVIOUS JOBS NEEDS TO BE ADDED TO THE `needs` SECTION OF THIS JOB!

  ci-success:
    name: ci
    if: success()
    needs:
      - test
      - build
      - no-std
      - msrv
      - valgrind
      - tidy
      - docs
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        run: exit 0
