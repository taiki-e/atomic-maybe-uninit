#!/usr/bin/env bash
# SPDX-License-Identifier: Apache-2.0 OR MIT
# shellcheck disable=SC2207
set -CeEuo pipefail
IFS=$'\n\t'
trap -- 's=$?; printf >&2 "%s\n" "${0##*/}:${LINENO}: \`${BASH_COMMAND}\` exit with ${s}"; exit ${s}' ERR
cd -- "$(dirname -- "$0")"/..

# Generates code based on target-spec.
#
# USAGE:
#    ./tools/target_spec.sh
#
# This script is intended to be called by gen.sh, but can be called separately.

bail() {
  printf >&2 'error: %s\n' "$*"
  exit 1
}

utils_file=src/gen/utils.rs
build_file=src/gen/build.rs
mkdir -p -- "$(dirname -- "${utils_file}")"
mkdir -p -- "$(dirname -- "${build_file}")"

known_64_bit_arch=($(rustc -Z unstable-options --print all-target-specs-json | jq -r '. | to_entries[].value | if ."target-pointer-width" == 64 then .arch else empty end' | LC_ALL=C sort -u))

cat >|"${utils_file}" <<EOF
// SPDX-License-Identifier: Apache-2.0 OR MIT
// This file is @generated by ${0##*/}.
// It is not intended for manual editing.

#![allow(dead_code, unused_macros)]

// On AArch64, the base register of memory-related instructions must be 64-bit.
// Passing a 32-bit value to \`in(reg)\` on AArch64 results in the upper bits
// having an undefined value, but to work correctly with ILP32 ABI, the upper
// bits must be zero, which is handled here by casting to u64. Another way to
// handle this is to pass it as a pointer and clear the upper bits inside asm,
// but it is easier to overlook than cast, which can catch overlooks by
// asm_sub_register lint.
// See also https://github.com/ARM-software/abi-aa/blob/2025Q1/aapcs64/aapcs64.rst#pointers
//
// Except for x86_64, which can use 32-bit registers in the destination operand
// (on x86_64, we use the ptr_modifier macro to handle this), we need to do the
// same for ILP32 ABI on other 64-bit architectures. (At least, as far as I can
// see from the assembly generated by LLVM, this is also required for MIPS64 N32
// ABI. I don't know about the RISC-V RV64ILP32* ABI, but in any case, this
// should be a safe default for such ABIs).
//
// Known architectures that have such ABI are x86_64 (X32), AArch64 (ILP32),
// mips64 (N32), and riscv64 (RV64ILP32*). (As of 2025-01-23, only the former
// two are supported by rustc.) However, we list all known 64-bit architectures
// because similar ABIs may exist or future added for other architectures.
#[cfg(all(
    target_pointer_width = "32",
    any(
$(sed -E 's/^/        target_arch = "/g; s/$/",/g' <<<"${known_64_bit_arch[*]}")
    ),
))]
#[macro_use]
mod imp {
    #[cfg(not(any(target_arch = "x86", target_arch = "x86_64")))]
    macro_rules! ptr_reg {
        (\$ptr:ident) => {{
            let _: *const _ = \$ptr; // ensure \$ptr is a pointer (*mut _ or *const _)
            #[allow(clippy::ptr_as_ptr)]
            {
                // If we cast to u64 here, the provenance will be lost,
                // so we convert to MaybeUninit<u64> via zero extend helper.
                crate::utils::zero_extend64_ptr(\$ptr as *mut ())
            }
        }};
    }
    pub(crate) type RegSize = u64;
}
#[cfg(not(all(
    target_pointer_width = "32",
    any(
$(sed -E 's/^/        target_arch = "/g; s/$/",/g' <<<"${known_64_bit_arch[*]}")
    ),
)))]
#[macro_use]
mod imp {
    #[cfg(not(any(target_arch = "x86", target_arch = "x86_64")))]
    macro_rules! ptr_reg {
        (\$ptr:ident) => {{
            let _: *const _ = \$ptr; // ensure \$ptr is a pointer (*mut _ or *const _)
            \$ptr // cast is unnecessary here.
        }};
    }
    pub(crate) type RegSize = usize;
}
pub(crate) use self::imp::RegSize;
EOF

arm_but_thumb_mode=()
thumb_but_arm_mode=()
for target in $(rustc -Z unstable-options --print all-target-specs-json | jq -r '. | to_entries[] | if .value.arch == "arm" then .key else empty end'); do
  cfgs=$(rustc --print cfg --target "${target}")
  case "${target}" in
    thumb*)
      if ! grep -Fq 'target_feature="thumb-mode"' <<<"${cfgs}"; then
        thumb_but_arm_mode+=("${target}")
      fi
      ;;
    *)
      if grep -Fq 'target_feature="thumb-mode"' <<<"${cfgs}"; then
        arm_but_thumb_mode+=("${target}")
      fi
      ;;
  esac
done
if [[ ${#thumb_but_arm_mode[@]} -ne 0 ]]; then
  IFS=' '
  bail "thumb* but in arm mode...: ${thumb_but_arm_mode[*]}"
fi

# sort and dedup
IFS=$'\n'
arm_but_thumb_mode=($(LC_ALL=C sort -u <<<"${arm_but_thumb_mode[*]}" | sed -E 's/^/    "/g; s/$/",/g'))
IFS=$'\n\t'

cat >|"${build_file}" <<EOF
// SPDX-License-Identifier: Apache-2.0 OR MIT
// This file is @generated by ${0##*/}.
// It is not intended for manual editing.

#[rustfmt::skip]
pub(crate) static ARM_BUT_THUMB_MODE: &[&str] = &[
${arm_but_thumb_mode[*]}
];
EOF
